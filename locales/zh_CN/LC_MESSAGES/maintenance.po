# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Read the Docs
# This file is distributed under the same license as the Sphinx AutoAPI
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx AutoAPI 3.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-12-24 14:56+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../maintenance/design.rst:2
msgid "Design Reference"
msgstr ""

#: ../../maintenance/design.rst:5
msgid "Python"
msgstr ""

#: ../../maintenance/design.rst:7
msgid ""
"When choosing what to document, AutoAPI aims to document anything that is"
" publicly accessible through the actual package when loaded in Python. "
"For example if a function is imported from a submodule into a package, "
"that function is documented in both the submodule and the package. There "
"are some exceptions to this rule:"
msgstr ""

#: ../../maintenance/design.rst:14
msgid ""
"Anything that is imported into a module is not documented. Usually a "
"module is where implementations exist. Therefore an import of something "
"is usually for the usage of the implementation, and not as something to "
"be accessed publicly."
msgstr ""

#: ../../maintenance/design.rst:18
msgid ""
"When the module or package defines an ``__all__``, only the members named"
" in ``__all__`` are documented."
msgstr ""

#: ../../maintenance/design.rst:20
msgid ""
"When a configuration option indicates that private or special members "
"should also be documented."
msgstr ""

#: ../../maintenance/design.rst:23
msgid ""
"Furthermore, AutoAPI follows the same docstring inheritance rules as "
":func:`inspect.getdoc`, with some exceptions:"
msgstr ""

#: ../../maintenance/design.rst:26
msgid ""
"The docstrings of the following methods are not inherited because they "
"are usually redundant:"
msgstr ""

#: ../../maintenance/design.rst:28
msgid ":meth:`object.__init__`"
msgstr ""

#: ../../maintenance/design.rst:29
msgid ":meth:`object.__new__`"
msgstr ""

#: ../../maintenance/design.rst:30
msgid ":meth:`type.__init__`"
msgstr ""

#: ../../maintenance/design.rst:31
msgid ":meth:`type.__new__`"
msgstr ""

#: ../../maintenance/design.rst:35
msgid "Introduction"
msgstr ""

#: ../../maintenance/design.rst:37
msgid ""
"We are working with Sphinx, which has an existing way of doing this. "
"Generally, you define a `Domain` which describes the various language "
"structure, a *Class* or *Method*, for example. Then the user will write "
"RST that uses these definitions, and Sphinx will create output from that "
"markup."
msgstr ""

#: ../../maintenance/design.rst:51
msgid ""
"The author of the documentation will have now told Sphinx that the *spam*"
" function exists in the Python project that is being documented."
msgstr ""

#: ../../maintenance/design.rst:54
msgid "Autogenerated Output"
msgstr ""

#: ../../maintenance/design.rst:56
msgid ""
"Sphinx then built a series of tools to make the generation of this markup"
" easier and more automatic:"
msgstr ""

#: ../../maintenance/design.rst:58
msgid "`Autodoc <http://sphinx-doc.org/ext/autodoc.html>`_"
msgstr ""

#: ../../maintenance/design.rst:59
msgid "`Autosummary <http://sphinx-doc.org/ext/autosummary.html>`_"
msgstr ""

#: ../../maintenance/design.rst:61
msgid ""
"Autodoc is a Python-only solution that imports the author's code into "
"memory, and then allows the author to more automatically document full "
"objects. For example, you can document a whole class on a page."
msgstr ""

#: ../../maintenance/design.rst:67
msgid "This will generate output that looks like:"
msgstr ""

#: ../../maintenance/design.rst:72
msgid "Noodle's docstring."
msgstr ""

#: ../../maintenance/design.rst:74
msgid ""
"There are also options for it to include a full listing of the classes "
"attributes, methods, and other things, automatically."
msgstr ""

#: ../../maintenance/design.rst:76
msgid ""
"Remember, this depends on ``Noodle`` being importable by the Python "
"interpreter running Sphinx."
msgstr ""

#: ../../maintenance/design.rst:79
msgid "Proposed Architecture"
msgstr ""

#: ../../maintenance/design.rst:81
msgid "The proposed architecture for this project is as follows:"
msgstr ""

#: ../../maintenance/design.rst:83
msgid ""
"A parser will read the source files into an internal representation of "
"the objects that can be documented."
msgstr ""

#: ../../maintenance/design.rst:84
msgid ""
"Take the internal representation and generate in-memory rst that "
"corresponds to the Sphinx domain objects."
msgstr ""

#: ../../maintenance/design.rst:85
msgid ""
"Sphinx will output HTML based on the doctree generated from the in-memory"
" rst."
msgstr ""

#: ../../maintenance/design.rst:87
msgid "In diagram form::"
msgstr ""

#: ../../maintenance/design.rst:92
msgid "File Structure vs. Hierarchy"
msgstr ""

#: ../../maintenance/design.rst:94
msgid ""
"Specific ID's should have one specific detail representation. This means "
"that every internal object should only have one place that it is rendered"
" with a ``.. <domain>:<type>::`` canonical identifier. All other places "
"it is referenced should be in either:"
msgstr ""

#: ../../maintenance/design.rst:98
msgid "A reference"
msgstr ""

#: ../../maintenance/design.rst:99
msgid "A toctree (listing)"
msgstr ""

#: ../../maintenance/design.rst:103
msgid "Sphinx Implementation"
msgstr ""

#: ../../maintenance/design.rst:105
msgid ""
"The user will run a normal `make html` as part of the experience. The "
"generation and loading will be done as an extension that can be "
"configured."
msgstr ""

#: ../../maintenance/design.rst:108
msgid "There will be Sphinx configuration for how things get built:"
msgstr ""

#: ../../maintenance/design.rst:115
msgid ""
"We will then loop over all source files in the ``autoapi_dir`` and parse "
"them. They will then be output into ``autoapi_root`` inside the "
"documentation."
msgstr ""

#: ../../maintenance/design.rst:120
msgid "Examples"
msgstr ""

#: ../../maintenance/design.rst:122
msgid "A nice example of Sphinx Python output similar to what we want:"
msgstr ""

#: ../../maintenance/design.rst:124
msgid "http://dta.googlecode.com/git/doc/_build/html/index.html"
msgstr ""

#: ../../maintenance/design.rst:125
msgid "Src: https://raw.githubusercontent.com/sfcta/dta/master/doc/index.rst"
msgstr ""

#: ../../maintenance/design.rst:127
msgid "An example domain for Spec:"
msgstr ""

#: ../../maintenance/design.rst:129
msgid "https://subversion.xray.aps.anl.gov/bcdaext/specdomain/trunk/src/specdomain/sphinxcontrib/specdomain.py"
msgstr ""

#: ../../maintenance/index.rst:3
msgid "Contributor's Guides"
msgstr ""

#: ../../maintenance/release-process.rst:2
msgid "Release Process"
msgstr ""

#: ../../maintenance/release-process.rst:4
msgid ""
"This page documents the steps to be taken to release a new version of "
"Sphinx AutoAPI."
msgstr ""

#: ../../maintenance/release-process.rst:7
msgid "Pre-Checks"
msgstr ""

#: ../../maintenance/release-process.rst:9
msgid "Check that the dependencies of the package are correct."
msgstr ""

#: ../../maintenance/release-process.rst:10
msgid "Clean the ``.tox`` directory and run the tests."
msgstr ""

#: ../../maintenance/release-process.rst:11
msgid "Commit and push any changes needed to make the tests pass."
msgstr ""

#: ../../maintenance/release-process.rst:12
#: ../../maintenance/release-process.rst:20
msgid "Check that the tests passed on github."
msgstr ""

#: ../../maintenance/release-process.rst:15
msgid "Preparation"
msgstr ""

#: ../../maintenance/release-process.rst:17
msgid "Update the version numbers in ``autoapi/__init__.py``."
msgstr ""

#: ../../maintenance/release-process.rst:18
msgid "Run ``tox -e release_notes -- build``"
msgstr ""

#: ../../maintenance/release-process.rst:19
msgid "Commit and push the changes."
msgstr ""

#: ../../maintenance/release-process.rst:23
msgid "Release"
msgstr ""

#: ../../maintenance/release-process.rst:25
msgid ""
"Create a new release in github that tags the commit and uses the built "
"release notes as the description. The tag created by the release will "
"trigger the github actions to build and upload the package to PyPI."
msgstr ""

